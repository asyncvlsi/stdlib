/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2020-2021 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */
import std::data;
import "std/func.act";

/*------------------------------------------------------------------------
 * 
 *   D E L A Y   I N S E N S I T I V E   C H A N N E L S
 *
 * Channel naming conventions:
 *
 *    e = enable, a = acknowledge
 *    v = valid, channel contains a .v field that implies data validity
 *    r = channel resets with data token on its output
 *
 *   (e|a)[v][r]1of<N>  - channel with 1ofN encoding
 *
 *  These standard channels are "push"-type channels, with an active
 *  sender and passive receiver.
 *
 *
 *  Pull channels:
 *     pull_[v][r]1of<N>  - pull channel with 1ofN encoding 
 *                          (data, "r" for request)
 *
 *  Short-cuts:
 *     e1of1 - has a ".r" field for request
 *
 *     e1of2, ev1of2, er1of2, evr1of2 - has ".t" and ".f" rails
 *
 *     a1of1
 *     a1of2, av1of2, ar1of2, avr1of2
 *
 *  Reset protocol:
 *      e channels : reset with e low and data low [special case to
 *                         reduce reset transistors]
 *                   reset with e high and data valid when a token exists
 *
 *      a channels : reset with a low and data low
 *                   reset with a low and data high when a token
 *                   exists
 *
 *
 *    ledr : transition-signaling four state channel (a.k.a. LEDR) channel
 *   xledr : ledr exchange channel
 *
 *
 *  Multi-bit DI channels
 *
 *   e[r]Mx1of2<M> : multi-bit 1of2
 *   a[r]Mx1of2<M> : multi-bit 1of2
 *
 *   pull_[r]Mx1of2<M> : pull channel
 *
 *
 *
 *   B U N D L E D    D A T A    C H A N N E L S
 *
 *
 *    Fields:  .r = request, .a = ack, .d[] = data bundle
 *
 *   [r]bd<M> : bundled-data push-type M-bit channel, .r driven by sender
 *    
 *  pull_[r]bd<M> : bundled-data pull-type M-bit channel, .r driven by receiver
 *
 *  ts_[r]bd<M> : transition-signalling bundled-data M-bit channel
 *
 *------------------------------------------------------------------------
 */

namespace std {

export namespace channel {

/*------------------------------------------------------------------------
 *
 *  Single DI code channels
 *
 *------------------------------------------------------------------------
 */

/*
 * A single 1ofN channel
 *
 *    reset : true if the channel resets with data on its output
 *        V : initial reset token value
 *        N : one of "N" code
 */
template<pbool reset; pint V; pint N>
defchan gen_e1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool!? e)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ])
      [] else -> (,i:N: d.d[i]-)
      ]   
    }

    /*-- set output data --*/
    set {
      [([]i:N: self = i -> d.d[i]+)]
    }

    /*-- finish synchronization --*/
    send_up {
      [~e]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:N:d.d[i]-);[e]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> e+
      [] ~reset -> e-
      ]
    }

    /*-- get value --*/
    get {
      [([]i:N:d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      e-
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [(&i:N:~d.d[i])];e+
    }

    /*-- probe expression on receiver --*/
    recv_probe = (|i:N:d.d[i]);

    // no sender probe
  }
}
  
export defchan e1of <: gen_e1of<false,0> () { }
export defchan er1of <: gen_e1of<true,0> () { }

template<pbool reset; pint V; pint N>
defchan gen_ev1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool?! v; bool!? e)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ]),v+
	[] else -> (,i:N: d.d[i]-),v-
      ]   
    }

    /*-- set output data --*/
    set {
      [([]i:N: self = i -> d.d[i]+)];v+
    }

    /*-- finish synchronization --*/
    send_up {
      [~e]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:N:d.d[i]-);v-;[e]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> e+
      [] ~reset -> e-
      ]
    }

    /*-- get value --*/
    get {
      [([]i:N:v & d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      e-
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [~v & (&i:N:~d.d[i])];e+
    }

    /*-- probe expression on receiver --*/
    recv_probe = v;

    // no sender probe
  }
}
export defchan ev1of <: gen_ev1of<false,0> () { }
export defchan evr1of <: gen_ev1of<true,0> () { }

/* -- short cuts -- */
export defchan e1of1 <: e1of<1> (bool?! r)
{
  r = d.d[0];
}

export defchan e1of2 <: e1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan er1of2 <: e1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan ev1of2 <: ev1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan evr1of2 <: evr1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

/*------------------------------------------------------------------------
 *   Ack channels
 *------------------------------------------------------------------------
 */
  
template<pbool reset; pint V; pint N>
defchan gen_a1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool!? a)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ])
      [] else -> (,i:N: d.d[i]-)
      ]   
    }

    /*-- set output data --*/
    set {
      [([]i:N: self = i -> d.d[i]+)]
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:N:d.d[i]-);[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [([]i:N:d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [(&i:N:~d.d[i])];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = (|i:N:d.d[i]);

    // no sender probe
  }
}
export defchan a1of <: gen_a1of<false,0> () { }
export defchan ar1of <: gen_a1of<true,0> () { }

template<pbool reset; pint V; pint N>
defchan gen_av1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool?! v; bool!? a)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ]),v+
	[] else -> (,i:N: d.d[i]-),v-
      ]   
    }

    /*-- set output data --*/
    set {
      [([]i:N: self = i -> d.d[i]+)];v+
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:N:d.d[i]-);v-;[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [([]i:N:v & d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [~v & (&i:N:~d.d[i])];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = v;

    // no sender probe
  }
}
export defchan av1of <: gen_av1of<false,0> () { }
export defchan avr1of <: gen_av1of<true,0> () { }

export defchan a1of1 <: a1of<1> (bool?! r)
{
  r = d.d[0];
}

export defchan a1of2 <: a1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan ar1of2 <: a1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan av1of2 <: av1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

export defchan avr1of2 <: avr1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}


/*------------------------------------------------------------------------
 *
 *   Pull channels
 *
 *------------------------------------------------------------------------
 */

template<pbool reset; pint V; pint N>
defchan gen_p1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool!? r)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ])
      [] else -> (,i:N: d.d[i]-)
      ]   
    }

    /*-- set output data --*/
    set {
      [r];[([]i:N: self = i -> d.d[i]+)]
    }

    /*-- finish synchronization --*/
    send_up {
      skip
    }

    /*-- reset part of the protocol --*/
    send_rest {
      [~r];(,i:N:d.d[i]-)
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> r+
      [] ~reset -> r-
      ]
    }

    /*-- get value --*/
    get {
      r+;[([]i:N:d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      skip
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      r-;[(&i:N:~d.d[i])]
    }

    /*-- probe expression on sender --*/
    send_probe = r;

    // no recv probe
  }
}
export defchan pull_1of <: gen_p1of<false,0> () { }
export defchan pull_r1of <: gen_p1of<true,0> () { }

template<pbool reset; pint V; pint N>
defchan gen_pv1of <: chan(enum<N>) (std::data::d1of?!<N> d; bool?! v; bool!? r)
{
  { 0 <= V & V < N : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:N: [ i != V -> d.d[i]- [] else -> d.d[i]+ ]),v+
      [] else -> (,i:N: d.d[i]-),v-
      ]   
    }

    /*-- set output data --*/
    set {
      [r];[([]i:N: self = i -> d.d[i]+)];v+
    }

    /*-- finish synchronization --*/
    send_up {
      skip
    }

    /*-- reset part of the protocol --*/
    send_rest {
      [~r];(,i:N:d.d[i]-);v-
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> r+
      [] ~reset -> r-
      ]
    }

    /*-- get value --*/
    get {
      r+;[([]i:N:v & d.d[i] -> self := i)]
    }

    /*-- finish synchronization action --*/
    recv_up {
      skip
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      r-;[~v & (&i:N:~d.d[i])]
    }

    /*-- probe expression on sender --*/
    send_probe = r;

    // no recv probe
  }
}
export defchan pull_v1of <: gen_pv1of<false,0> () { }
export defchan pull_vr1of <: gen_pv1of<true,0> () { }

export defchan pull_1of2 <: pull_1of<2> (bool?! t, f)
{
  d.d[0] = f;
  d.d[1] = t;
}

/*------------------------------------------------------------------------
 *
 *  Multi-bundle DI codes
 *
 *------------------------------------------------------------------------
 */
template<pbool reset; pint V; pint M>
defchan gen_Mx1of2 <: chan(int<M>) (std::data::Mx1of2?!<M> d; bool!? e)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
      [] else -> (,i:M: d.d[i].t-,d.d[i].f-)
      ]
    }

    /*-- set output data --*/
    set {
      (,i:M: [((self >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
    }

    /*-- finish synchronization --*/
    send_up {
      [~e]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:M: d.d[i].t-,d.d[i].f-);[e]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> e+
      [] ~reset -> e-
      ]
    }

    /*-- get value --*/
    get {
      [(&i:M: d.d[i].t | d.d[i].f)];
      self := 0;
      (;i:M: [ d.d[i].t -> self := self | (1 << i)
	     [] else -> skip
	     ]
      )
    }

    /*-- finish synchronization action --*/
    recv_up {
      e-
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [(&i:M:~d.d[i].t & ~d.d[i].f)];e+
    }

    /*-- probe expression on receiver --*/
    recv_probe = (d.d[0].t|d.d[0].f);

    // no sender probe
  }
}
export defchan eMx1of2 <: gen_Mx1of2<false,0> () { }
export defchan erMx1of2 <: gen_Mx1of2<true,0> () { }


template<pbool reset; pint V; pint M>
defchan gen_aMx1of2 <: chan(int<M>) (std::data::Mx1of2?!<M> d; bool!? a)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
      [] else -> (,i:M: d.d[i].t-,d.d[i].f-)
      ]
    }

    /*-- set output data --*/
    set {
      (,i:M: [((self >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      (,i:M: d.d[i].t-,d.d[i].f-);[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [(&i:M: d.d[i].t | d.d[i].f)];
      self := 0;
      (;i:M: [ d.d[i].t -> self := self | (1 << i)
	     [] else -> skip
	     ]
      )
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [(&i:M:~d.d[i].t & ~d.d[i].f)];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = (d.d[0].t|d.d[0].f);

    // no sender probe
  }
}
export defchan aMx1of2 <: gen_aMx1of2<false,0> () { }
export defchan arMx1of2 <: gen_aMx1of2<true,0> () { }


template<pbool reset; pint V; pint M>
defchan gen_pMx1of2 <: chan(int<M>) (std::data::Mx1of2?!<M> d; bool!? r)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
      [] else -> (,i:M: d.d[i].t-,d.d[i].f-)
      ]
    }

    /*-- set output data --*/
    set {
      [r];(,i:M: [((self >> i) & 1) = 0 -> d.d[i].f+ [] else -> d.d[i].t+ ])
    }

    /*-- finish synchronization --*/
    send_up {
      skip
    }

    /*-- reset part of the protocol --*/
    send_rest {
      [~r];(,i:M: d.d[i].t-,d.d[i].f-)
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [ reset -> r+
      [] ~reset -> r-
      ]
    }

    /*-- get value --*/
    get {
      r+;
      [(&i:M: d.d[i].t | d.d[i].f)];
      self := 0;
      (;i:M: [ d.d[i].t -> self := self | (1 << i)
	     [] else -> skip
	     ]
      )
    }

    /*-- finish synchronization action --*/
    recv_up {
      skip
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      r-;[(&i:M:~d.d[i].t & ~d.d[i].f)]
    }

    /*-- probe expression on sender --*/
    send_probe = r;

    // no recv probe
  }
}
export defchan pull_Mx1of2 <: gen_pMx1of2<false,0> () { }
export defchan pull_rMx1of2 <: gen_pMx1of2<true,0> () { }


/*------------------------------------------------------------------------
 *
 *  Bundled data
 *
 *------------------------------------------------------------------------
 */
template<pbool reset; pint V; pint M>
defchan gen_Mbd <: chan(int<M>) (bool?! d[M]; bool?! r; bool!? a)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };

  spec {
    /* timing fork */
    timing a- : d* < r*+
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ])
     [] else -> (,i:M: d[i]-)
      ];r-
    }

    /*-- set output data --*/
    set {
      (,i:M: [((self >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ]);r+
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      r-;[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [r];
      self := 0;
      (;i:M: self := self | (int(d[i]) << i))
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [~r];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = r;

    // no sender probe
  }
}
export defchan bd <: gen_Mbd<false,0> () { }
export defchan rbd <: gen_Mbd<true,0> () { }

export defchan bdbool <: chan(bool) (bool?! d; bool?! r; bool!? a)
{
  spec {
    /* timing fork */
    timing a- : d* < r*+
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      d-;r-
    }

    /*-- set output data --*/
    set {
      [self -> d+ [] ~self -> d- ]; r+
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      r-;[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [r];
      self := d
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [~r];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = r;

    // no sender probe
  }
}



/*
 * Bundled-data channel for standard memory interface
 *   Encoding: bottom two bits are control
 *             0 = write, 1 = read, 2 = read-modify-write
 */
export 
template<pint M>
defchan bd_memaddr <: chan(int<M+2>) (bool?! d[M]; bool?! r, w, rw; bool!? a)
{
  spec {
    /* timing forks */
    timing a- : d* < r*+
    timing a- : d* < rw*+
    timing a- : d* < w*+
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      (,i:M: d[i]-),r-,w-,rw-
    }

    /*-- set output data --*/
    set {
      (,i:M: [((self >> (i+2)) & 1) = 0 -> d[i]- [] else -> d[i]+ ]);
      [self{1..0} = 0 -> w+
      []self{1..0} = 1 -> r+
      []self{1..0} = 2 -> rw+
      ]
    }

    /*-- finish synchronization --*/
    send_up {
      [a]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      r-,w-,rw-;[~a]
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [r|w|rw];
      self := 0;
      (;i:M: self := self | (int(d[i]) << (i+2)));
      [r ->  self := self | 1
      []rw -> self := self | 2
      [] else -> skip
      ]  
    }

    /*-- finish synchronization action --*/
    recv_up {
      a+
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      [~r&~w&~rw];a-
    }

    /*-- probe expression on receiver --*/
    recv_probe = (r|w|rw);

    // no sender probe
  }
}



template<pbool reset; pint V; pint M>
defchan gen_pMbd <: chan(int<M>) (bool?! d[M]; bool!? r; bool?! a)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };

  spec {
    /* timing fork */
    timing r+ : d < a+
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ]);a+
      [] else -> (,i:M: d[i]-);a-
      ]
    }

    /*-- set output data --*/
    set {
      [r];
      (,i:M: [((self >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ]);a+
    }

    /*-- finish synchronization --*/
    send_up {
      skip
    }

    /*-- reset part of the protocol --*/
    send_rest {
      [~r];a-
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      [reset -> r+ [] ~reset -> r- ]
    }

    /*-- get value --*/
    get {
      r+;[a];
      self := 0;
      (;i:M: self := self | (int(d[i]) << i))
    }

    /*-- finish synchronization action --*/
    recv_up {
      skip
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      r-;[~a]
    }

    /*-- probe expression on sender --*/
    send_probe = r;

    // no sender probe
  }
}
export defchan pull_bd <: gen_pMbd<false,0> () { }
export defchan pull_rbd <: gen_pMbd<true,0> () { }

/*------------------------------------------------------------------------
 *
 *  Transition signalling bundled data
 *
 *------------------------------------------------------------------------
 */

template<pbool reset; pint V; pint M>
defchan gen_ts_Mbd <: chan(int<M>) (bool?! d[M]; bool?! r; bool!? a)
{
  { 0 <= V & std::ceil_log2(V) < M : "Initial token value out of range" };

  spec {
    /* timing fork */
    timing a- : d* < r*+
    timing a+ : d* < r*-
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      [ reset -> (,i:M: [ ((V >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ])
     [] else -> (,i:M: d[i]-)
      ];r-
    }

    /*-- set output data --*/
    set {
      (,i:M: [((self >> i) & 1) = 0 -> d[i]- [] else -> d[i]+ ]);
      [r->r- [] ~r -> r+]
    }

    /*-- finish synchronization --*/
    send_up {
      [a&r|~a&~r]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      skip
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [r&~a|~r&a];
      self := 0;
      (;i:M: self := self | (int(d[i]) << i))
    }

    /*-- finish synchronization action --*/
    recv_up {
      [a->a-[]~a->a+]
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      skip
    }

    /*-- probe expression on receiver --*/
    recv_probe = r&~a|~r&a;

    // no sender probe
  }
}

export defchan ts_bd <: gen_ts_Mbd<false,0> () { }
export defchan ts_rbd <: gen_ts_Mbd<true,0> () { }

export
defchan ts_bdbool <: chan(bool) (bool?! d; bool?! r; bool!? a)
{
  spec {
    /* timing fork */
    timing a- : d* < r*+
    timing a+ : d* < r*-
  }
  
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      d-;r-
    }

    /*-- set output data --*/
    set {
      [self -> d+ [] ~self -> d-];
      [r->r- [] ~r -> r+]
    }

    /*-- finish synchronization --*/
    send_up {
      [a&r|~a&~r]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      skip
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [r&~a|~r&a];
      self := d
    }

    /*-- finish synchronization action --*/
    recv_up {
      [a->a-[]~a->a+]
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      skip
    }

    /*-- probe expression on receiver --*/
    recv_probe = r&~a|~r&a;

    // no sender probe
  }
}


/*------------------------------------------------------------------------
 *
 * Four state coding (LEDR) : transition signalling one-bit DI channel
 *
 *------------------------------------------------------------------------
 */
export
defchan ledr <: chan(bool) (bool?! data, rep; bool!? a)
{
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      data-,rep-
    }

    /*-- set output data --*/
    set {
      [self&data|~self&~data-> [rep->rep-[]~rep->rep+]
      [] else -> [data->data-[]~data->data+]
      ]		  
    }

    /*-- finish synchronization --*/
    send_up {
      [~a&~(data&~rep|~data&rep)|a&(data&~rep|~data&rep)]
    }

    /*-- reset part of the protocol --*/
    send_rest {
      skip
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      a-
    }

    /*-- get value --*/
    get {
      [~a&~(data&~rep|~data&rep)|a&(data&~rep|~data&rep)];
      [data->self+[]~data->self-]
    }

    /*-- finish synchronization action --*/
    recv_up {
      [a->a-[]~a->a+]
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      skip
    }

    /*-- probe expression on receiver --*/
    recv_probe = ~a&~(data&~rep|~data&rep)|a&(data&~rep|~data&rep);

    // no sender probe
  }
}


export
defchan xledr <: chan(bool,bool) (bool?! data, rep; bool!? ackdata,ackrep)
{
  methods {
    /*-- initialize channel, sender end --*/
    send_init {
      data-,rep-
    }

    /*-- set output data --*/
    set {
      [self&data|~self&~data-> [rep->rep-[]~rep->rep+]
      [] else -> [data->data-[]~data->data+]
      ]		  
    }

    /*-- finish synchronization --*/
    send_up {
      [(ackdata&ackrep|~ackdata&~ackrep)&~(data&~rep|~data&rep)|(ackdata&~ackrep|~ackdata&ackrep) &(data&~rep|~data&rep)];
      selfack := ackdata
    }

    /*-- reset part of the protocol --*/
    send_rest {
      skip
    }

    /*-- initialize channel, receiver end --*/
    recv_init {
      ackdata-,ackrep-
    }

    /*-- get value --*/
    get {
      [(ackdata&ackrep|~ackdata&~ackrep)&~(data&~rep|~data&rep)|(ackdata&~ackrep|~ackdata&ackrep)&(data&~rep|~data&rep)];
      [data->self+[]~data->self-]
    }

    /*-- finish synchronization action --*/
    recv_up {
      [selfack&ackdata|~selfack&~ackdata-> [ackrep->ackrep-[]~ackrep->ackrep+]
      [] else -> [ackdata->ackdata- [] ~ackdata->ackdata+]
      ]	  
    }

    /*-- reset part of the protocol --*/
    recv_rest {
      skip
    }

    /*-- probe expression on receiver --*/
    recv_probe = (ackdata&ackrep|~ackdata&~ackrep)&~(data&~rep|~data&rep)|(ackdata&~ackrep|~ackdata&ackrep) &(data&~rep|~data&rep);

    // no sender probe
  }
}


}

}
