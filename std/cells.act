/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2020-2021 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 * 
 *  A technology-independent cell library for combinational gates.
 *  Useful for generating the datapath for latch-based bundled-data logic.
 *
 *  Where possible, we have used the same names and similar sizing
 *  information as James Stine's open-source SPICE library for a 180nm 
 *  process.
 *
 *------------------------------------------------------------------------
 */

import globals;

namespace std {

export namespace cells {

export defcell TIELOX1 (bool! Y)
{
  bool x;
  spec {
    rand_init (x)
  }
  prs {
    [keeper=2] x -> Y-
    [keeper=2] ~x -> x+
  }
}

export defcell TIEHIX1 (bool! Y)
{
  bool x;
  spec {
    rand_init (x)
  }
  prs {
    [keeper=2] ~x -> Y+
    [keeper=2] x -> x-
  }
}

/*-- inverters --*/

defproc inv (bool? A; bool! Y)
{
  prs {
    A => Y-
  }
}

template<pint nf>
defproc szinv <: inv()
{
  [nf = 0 -> sizing { Y {-1} }
  [] else -> sizing { Y {-2*nf,svt,nf} }
  ]
}

export defcell INVX1 <: szinv<0>() { } 
export defcell INVX2 <: szinv<1>() { } 
export defcell INVX4 <: szinv<2>() { }
export defcell INVX8 <: szinv<4>() { }

/*-- clock delay buffers --*/

template<pint N>
defproc dbuf (bool? in; bool! out)
{
  {N > 0 : "Delay buffer needs at least one stage!"};
  bool sig[2*N+1];
  sig[0] = in;
  sig[2*N] = out;
  prs {
    (i:2*N: ~sig[i] <80;2> -> sig[i+1]+
             sig[i] <40;2> -> sig[i+1]-
     )
  }
}

export defcell CLKBUF1 <: dbuf<2>() { }
export defcell CLKBUF2 <: dbuf<3>() { }
export defcell CLKBUF3 <: dbuf<4>() { }


/*--  signal buffers --*/

defproc buf (bool? A; bool! Y)
{
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {
    A => _Y-
   _Y => Y-
  }
}
  
export defcell BUFX2 <: buf()
{
  sizing { _Y {-1}; Y {-2} }
}
  
export defcell BUFX4 <: buf()
{
  sizing { _Y {-1.5}; Y {-4,2} }
}

  
/*-- simple gates --*/
  
export defcell NOR2X1 (bool? A, B; bool! Y)
{
  prs {
     A | B => Y-
  }
  sizing { Y {-1} }
}
  
export defcell NOR2X2 (bool? A, B; bool! Y)
{
  prs {
     A | B => Y-
  }
  sizing { Y {-2} }
}
  
export defcell NOR3X1 (bool? A, B, C; bool! Y)
{
  prs {
    A | B | C => Y-
  }
  sizing { Y {-1} }
} 

export defcell OR2X1 (bool? A, B; bool! Y)
{
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {
     A | B => _Y-
     _Y => Y-
  }
  sizing { _Y{-1}; Y{-1} }
}
  
export defcell OR2X2 (bool? A, B; bool! Y)
{
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {
     A | B => _Y-
     _Y => Y-
  }
  sizing { _Y{-1}; Y{-2} }
} 

export defcell NAND2X1 (bool? A, B; bool! Y)
{
  prs {  
    A & B => Y-
  }
  sizing { Y{-1} }
}
  
export defcell NAND2X2 (bool? A, B; bool! Y)
{
  prs {  
    A & B => Y-
  }
  sizing { Y{-2} }
}
  
export defcell NAND3X1 (bool? A, B, C; bool! Y)
{
  prs {  
    A & B & C => Y-
  }
  sizing { Y{-1} }
}

export defcell AND2X1 (bool? A, B; bool! Y) 
{
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {  
    A & B => _Y- 
   _Y => Y-
  }
  sizing { _Y{-1}; Y{-1} }
} 

export defcell AND2X2 (bool? A, B; bool! Y) 
{ 
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {
    A & B => _Y-
   _Y => Y-
  }
  sizing { _Y{-1}; Y{-2} }
} 

export defcell XOR2X1 (bool? A, B; bool! Y)
{
   bool _A, _B;
  spec {
    hazard (_A,_B)
  }
   prs {
     A => _A-
     B => _B-

    [keeper=2] ~B & ~_A | ~_B & ~A -> Y+
     _B & _A | B & A -> Y-
   }
   sizing { _A{-1}; _B{-1}; Y{-1} }
}

export defcell XNOR2X1 (bool? A, B; bool! Y)
{
   bool _A, _B;
  spec {
    hazard (_A, _B)
  }
   prs {
     A => _A-
     B => _B-

    [keeper=2] ~B & ~A | ~_B & ~_A -> Y+
     B & _A | _B & A -> Y-
   }
   sizing { _A{-1}; _B{-1}; Y{-1} }
}

export defcell MUX2X1 (bool? A, B, S; bool! Y)
{
   // Y = !( S ? A : B )
   bool _S;
   spec {
     hazard (_S)
   }
   prs {
     S => _S-

    [keeper=2] ~A & ~_S | ~B & ~S -> Y+
     A & S | B & _S -> Y-
   }
   sizing { _S{-1}; Y{-1} }
}

export defcell OAI21X1 (bool? A, B, C; bool! Y)
{
  prs {
    (A | B) & C => Y-  
  }
  sizing { Y{-1} }
}

export defcell AOI21X1 (bool? A, B, C; bool! Y) 
{ 
  prs {
    A & B | C => Y-
  }
  sizing { Y{-1} }
}

export defcell OAI22X1 (bool? A, B, C, D; bool! Y)
{
  // Y = !((A|B) & (C|D))
  prs {
    (A | B) & (C | D) => Y-  
  }
  sizing { Y{-1} }
}

export defcell AOI22X1 (bool? A, B, C, D; bool! Y) 
{ 
  prs {
    A & B | C & D => Y-
  }
  sizing { Y{-1} }
}

export defcell MAJ3X1 (bool? A, B, C; bool! Y)
{
  bool _Y;
  spec {
    hazard (_Y)
  }
  prs {
    A & B | (A|B) & C -> _Y-
   ~A & ~B | (~A | ~B) & ~C -> _Y+

    _Y => Y-
  }
  sizing { _Y{-1}; Y{-1} }
}

/*--- arithmetic ---*/
  
export defcell HAX1 (bool? A, B; bool! YC, YS)
{
  bool _YC, _YS;
  spec {
    hazard (_YC, _YS)
  }
  prs {
     A & B => _YC-
    _YC  => YC-

    _YC & (A | B) => _YS-
    _YS => YS-
  }
  sizing { _YC{-1}; YC{-1}; _YS{-1}; YS{-1} }
}
  
export defcell FAX1 (bool? A, B, C; bool! YC, YS)
{
  bool _YC, _YS;
  spec {
    hazard (_YC, _YS)
  }
  prs {
    (A|B) & C | A&B => _YC-
    _YC => YC-

    (~A<40>|~B<36>|~C<36>)&~_YC<36> | ~A<48>&~B & ~C -> _YS+
    (A<20>|B|C) & _YC | A&B&C -> _YS-  

    _YS => YS-
  }
  sizing { _YC{-1}; YC{-1}; YS{-1} }
}

/*--- buffered transmission gates ---*/
  
export defcell TBUF1 (bool? A, EN; bool! Y)
{
  bool _en;
  prs {
    EN => _en-

   [keeper=0] ~A & ~_en -> Y+
    A & EN -> Y-
  }
  sizing { _en{-1}; Y{-1} }
}
 
export defcell TBUF2 (bool? A, EN; bool! Y)
{
  bool _en;
  prs {
    EN => _en-

   [keeper=0] ~A & ~_en -> Y+
    A & EN -> Y-
  }
  sizing { _en{-2}; Y{-2,2} }
}

/*--- clocked elements ---*/
 
export defcell LATCH (bool? CLK, D; bool! Q)
{
  bool _q, _clk;
  spec {
    hazard(_q)
  }
  prs * {
    CLK => _clk-

   [keeper=0] D<10> & CLK -> _q-
   ~D<20> & ~_clk -> _q+

   //feedback
  [iskeeper=1;keeper=0] ~Q<10> & ~CLK -> _q+    
  [iskeeper=1] Q<10> & _clk -> _q-

    _q => Q-
  }
  sizing { _clk{-2}; Q{-2} }
}

export defcell LATCHINV (bool? CLK, D, q; bool! _q)
{
  bool _clk;
  prs * {
    CLK => _clk-

   [keeper=0] D<10> & CLK -> _q-
   ~D<20> & ~_clk -> _q+

   //feedback
  [iskeeper=1;keeper=0] ~q<10> & ~CLK -> _q+
  [iskeeper=1] q<10> & _clk -> _q-

  }
  sizing { _clk{-2} }
}


export defproc LATCHLO (bool? R, CLK, D; bool! Q)
{
  bool _q;
  spec {
    hazard(_q)
  }
  LATCHINV l(CLK,D,Q,_q);
  NOR2X2 nx(_q,R,Q);
}
 
export defproc LATCHHI (bool? S, CLK, D; bool! Q)
{
  bool _s, _q;
  spec {
    hazard(_q, _s)
  }
  LATCHINV l(CLK,D,Q,_q);
  INVX1 ix(S,_s);
  NAND2X2 nx(_q,_s,Q);
}

}

}
