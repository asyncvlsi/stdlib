/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2020-2021 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 *
 *  Standard functions available for parameters
 *
 *        pow(n,m) : return n^m
 *
 *    ceil_log2(n) : return ceiling of log2(n)
 *
 *        max(a,b) : return maximum of the two
 *
 *        min(a,b) : return minimum of the two
 *
 *------------------------------------------------------------------------
 */

namespace std {

/* return n^m */
export function pow(pint n, m) : pint
{
  pint i;
  chp {
   i := 0;
   self := 1;
  *[ i < m -> self := self*n; i := i+1 ]
  }
}

export function ceil_log2 (pint a) : pint
{
  pint i;
  pint M;
  chp {
     i := 0;
     M := a-1;
    *[ M > 0 -> i := i + 1; M := M/2 ];
     self := i
  }
}

export function max(pint a, b) : pint
{
  chp {
    self := (a > b) ? a : b
  }
}

export function min(pint a, b) : pint
{
  chp {
    self := (a > b) ? b : a
  }
}


export namespace bit {

export
template<pint N, W>
function repeat(int<W> x) : int<N*W>
{
  { N > 0 : "Requires at least one bit in the output" };
  { W > 0 : "Requires at least one bit in the output" };
  
  chp {
    self := x;
    (;i: N-1: self := (self << W) | x)
  }
}

export
template<pint W, W2>
function sign_extend(int<W> x) : int<W2>
{
  { W2 > W : "Sign needs to be extended!" };

  chp {
    [ x{W-1} = 1 -> self := x | (~int(0,W2-W) << W)
   [] else -> self := x
    ]
  }
}

export
template<pint W>
function rol(int<W> x) : int<W>
{
  chp {
    self := (x << 1) | (x{W-1})
  }
}

export
template<pint W>
function ror(int<W> x) : int<W>
{
  chp {
   self := (x >> 1) | (x{0} << (W-1))
  }
}

/**
 * WARNING: This only works if x is non-zero.
 * The function returns the bit-position of the leading one in "x"
 */
export
template<pint W>
function find_msb_pos(int<W> x) : int<std::ceil_log2(W)>
{
  chp {
    self := 0;
    (; i : W : [ x{i} = 1 -> self := i [] else -> skip ])
  }
}

}


export
template<pint W; pint N; pint taps[N]>
function fib_lfsr (int<W> state) : int<W>
{
  int<1> bit;

  { (&i:N: 0 <= taps[i] & taps[i] < W) : "Invalid tap specification" };
  
  chp {
    bit := 0;
    (;i:N: bit := bit ^ state{taps[i]});
    self := (bit << (W-1)) | (state >> 1)
  }
}

export
template<pint W; pint N; pint taps[N]>
function galois_lfsr (int<W> state) : int<W>
{
  int<1> bit;
  
  { (&i:N: 0 <= taps[i] & taps[i] < W-1) : "Invalid tap specification" };
    
  chp {
    bit := state{0};
    self := (state >> 1) | (bit << (W-1));
    (;i:N: self := self & ~int(1 << taps[i], W) |  
               (state{(taps[i]+1)%W} ^ bit) << taps[i])
  }
}


}
