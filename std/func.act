/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2020-2021 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

/*------------------------------------------------------------------------
 *
 *  Standard functions available for parameters
 *
 *        pow(n,m) : return n^m
 *
 *    ceil_log2(n) : return ceiling of log2(n)
 *
 *        max(a,b) : return maximum of the two
 *
 *        min(a,b) : return minimum of the two
 *
 *------------------------------------------------------------------------
 */

namespace std {

/* return n^m */
export function pow(pint n, m) : pint
{
  pint i;
  chp {
   i := 0;
   self := 1;
  *[ i < m -> self := self*n; i := i+1 ]
  }
}

export function ceil_log2 (pint a) : pint
{
  pint i;
  pint M;
  chp {
     i := 0;
     M := a;
    *[ M > 1 -> i := i + 1; M := (M+1)/2 ];
     self := i
  }
}

export function max(pint a, b) : pint
{
  chp {
    self := (a > b) ? a : b
  }
}

export function min(pint a, b) : pint
{
  chp {
    self := (a > b) ? b : a
  }
}

export function lfsr64(int prev) : int
{
  int count, lfsr, bit;
  chp {
    lfsr := prev;
    count := 0;
    *[ count < 64 ->
      bit := ((lfsr >> 63) ^ (lfsr >> 3) ^ (lfsr >> 2) ^ (lfsr >> 0)) & 1;
      lfsr := (lfsr >> 1) | (bit << 63);
      count := count + 1
    ];
    self := lfsr
  }
}

}
