/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2025 Rajit Manohar, Jakob Jordan
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */


/*------------------------------------------------------------------------
 *
 *
 *  Simple signed integer math library
 *
 *
 *  For signed integers, use the datatype math::sint<W>.
 *
 *  Based on math::fixpoint, uses two's-complement representation.
 *  Additionally supports the following operations
 *
 *    Unsigned ops:
 *      clsl<W,N>(x) : constant logical left shift
 *
 *    Signed ops:
 *      sign_extend<W_OLD, W_NEW>(x) : sign extend from W_OLD to W_NEW
 *
 *------------------------------------------------------------------------
 */

import math::fxp;

namespace math {
    export
    template<pint W>
    deftype sint <: fixpoint<W,0> () {}

    export
    namespace sint_ops {
        template<pint W,N>
        function clsl(sint<W> v) : sint<W> {
            chp {
                self.x := v.x << N
            }
        }

        template<pint W_OLD, W_NEW>
        function sign_extend(sint<W_OLD> v) : sint<W_NEW> {
            int<W_NEW> x;
            chp {
                x := math::sign_extend<W_OLD, W_NEW>(v.x);
                self := math::sint<W_NEW>(x)
            }
        }
    }
}
